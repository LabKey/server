buildscript {
    repositories {
        maven {
            url "${artifactory_contextUrl}/plugins-release"
        }
        if (gradlePluginsVersion.contains("SNAPSHOT"))
        {
            maven {
                url "${artifactory_contextUrl}/plugins-snapshot-local"
            }

        }
    }
    dependencies {
        classpath "org.labkey.build:gradlePlugins:${gradlePluginsVersion}"
    }
    configurations.all {
        // Check for updates every build for SNAPSHOT dependencies
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
}
import org.labkey.gradle.util.BuildUtils

/*
  This file is used to determine which projects will be configured during the Gradle build of LabKey Server. 

  You need only provide the leaves of the project tree here; a Gradle project will be created for each 
  node in the tree with these leaves (e.g., 'server:modules:core' will create projects for ":server"
  ":server:modules" and ":server:modules:core").
 */
List<String> excludedDirs = ["test"]

if (hasProperty('excludeExternalModuleDirs'))
{
    excludedDirs.addAll("${excludeExternalModuleDirs}".toLowerCase().split(","))
}
// TODO: remove after labModules git migration
if (new File(getRootDir(), "server/modules/LabDevKitModules/LDK").exists()) {
    excludedDirs.addAll([
            "DISCVR",
            "labModules"
    ])
}

BuildUtils.includeModules(this.settings, rootDir, ["server/modules", "externalModules"], excludedDirs, true)

// include the test distribution, which is used to create an artifact for TeamCity to pass around to the agents
include "${BuildUtils.getTestProjectPath(this.settings.gradle)}:distributions:teamcity"

if (new File(getRootDir(), BuildUtils.convertPathToRelativeDir(BuildUtils.getJdbcApiProjectPath(gradle))).exists())
{
    include BuildUtils.getJdbcApiProjectPath(gradle)
}

if (new File(getRootDir(), BuildUtils.convertPathToRelativeDir(BuildUtils.getRemoteApiProjectPath(gradle))).exists())
{
    include BuildUtils.getRemoteApiProjectPath(gradle)
}

if (new File(getRootDir(), BuildUtils.convertPathToRelativeDir(BuildUtils.getSasApiProjectPath(gradle))).exists())
{
    include BuildUtils.getSasApiProjectPath(gradle)
}
