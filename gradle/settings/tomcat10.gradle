buildscript {
    repositories {
        mavenCentral {
            content {
                excludeGroupByRegex "org\\.labkey.*"
            }
        }
        gradlePluginPortal {
            content {
                excludeGroupByRegex "org\\.labkey.*"
            }
        }
        maven {
            url "${artifactory_contextUrl}/plugins-release-no-proxy"
            mavenContent {
                releasesOnly()
            }
            content {
                includeGroup "org.labkey.build"
                includeGroup "org.labkey.versioning"
            }
        }
        if (gradlePluginsVersion.contains("SNAPSHOT"))
        {
            mavenLocal()
            maven {
                url "${artifactory_contextUrl}/plugins-snapshot-local"
                mavenContent {
                    snapshotsOnly()
                }
                content {
                    includeGroup "org.labkey.build"
                    includeGroup "org.labkey.versioning"
                }
            }

        }
    }
    dependencies {
        classpath "org.labkey.build:gradlePlugins:${gradlePluginsVersion}"
    }
    configurations.configureEach {
        // Check for updates every build for SNAPSHOT dependencies
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
}
import org.labkey.gradle.util.BuildUtils

// Add modules here as they are migrated to tomcat 10
BuildUtils.includeModules(this.settings, rootDir, [
//        "server/modules/BimberLabKeyModules",
//        "server/modules/DiscvrLabKeyModules",
//        "server/modules/LabDevKitModules",
//        "server/modules/MacCossLabModules",
//        "server/modules/MaxQuant",
//        "server/modules/OConnorLabModules",
//        "server/modules/Response",
//        "server/modules/UserReg-WS",
//        "server/modules/accounts",
//        "server/modules/adjudication",
        "server/modules/assayRequest",
//        "server/modules/assayreport",
        "server/modules/biologics",
        "server/modules/cas",
//        "server/modules/cdisc_ODM",
//        "server/modules/cds",
//        "server/modules/cloud",
        "server/modules/cloudServices",
        "server/modules/commonAssays",
//        "server/modules/compliance",
//        "server/modules/complianceActivities",
//        "server/modules/connectors",
//        "server/modules/customModules",
//        "server/modules/dataFinder",
        "server/modules/dataintegration",
//        "server/modules/docker",
//        "server/modules/ehrModules",
//        "server/modules/evaluationContent",
//        "server/modules/fileTransfer",
//        "server/modules/freezerpro",
//        "server/modules/harvest",
        "server/modules/inventory",
        "server/modules/labbook",
        "server/modules/ldap",
        "server/modules/mfa",
//        "server/modules/moduleEditor",
//        "server/modules/nlp",
//        "server/modules/onprcEHRModules",
//        "server/modules/ontology",
//        "server/modules/openEMPI",
//        "server/modules/pepdb",
        "server/modules/platform",
        "server/modules/premium",
//        "server/modules/professional",
//        "server/modules/provenance",
        "server/modules/puppeteer",
//        "server/modules/pushdownloads",
//        "server/modules/reagent",
//        "server/modules/recipe",
//        "server/modules/redcap",
        "server/modules/redshift",
//        "server/modules/rstudio",
        "server/modules/saml",
        "server/modules/sampleManagement",
//        "server/modules/serviceTools",
        "server/modules/signing",
//        "server/modules/snd",
//        "server/modules/snprcEHRModules",
//        "server/modules/targetedms",
//        "server/modules/tnprc_billing",
//        "server/modules/tnprc_ehr",
//        "server/modules/trialServices",
//        "server/modules/trialShare",
//        "server/modules/tutorialModules",
//        "server/modules/wnprc-modules",
//        "server/modules/workflow",
], [], true)


// include the test distribution, which is used to create an artifact for TeamCity to pass around to the agents
include "${BuildUtils.getTestProjectPath(this.settings.gradle)}:distributions:teamcity"

//if (new File(getRootDir(), BuildUtils.convertPathToRelativeDir(BuildUtils.getJdbcApiProjectPath(gradle))).exists())
//{
//    include BuildUtils.getJdbcApiProjectPath(gradle)
//}

//if (new File(getRootDir(), BuildUtils.convertPathToRelativeDir(BuildUtils.getRemoteApiProjectPath(gradle))).exists())
//{
//    include BuildUtils.getRemoteApiProjectPath(gradle)
//}
