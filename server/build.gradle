import org.labkey.gradle.task.CreateModule
import org.labkey.gradle.util.BuildUtils

BuildUtils.addLabKeyDependency(project: project, config: 'jars', depProjectPath: ":remoteapi:java", transitive: true)
BuildUtils.addLabKeyDependency(project: project, config: 'jars', depProjectPath: ":schemas", depProjectConfig: "xmlSchema")
BuildUtils.addLabKeyDependency(project: project, config: 'tomcatJars', depProjectPath: ":server:bootstrap")
dependencies
        {
            tomcatJars  "com.sun.mail:javax.mail:${javaxMailVersion}"
            tomcatJars  "com.sun.activation:javax.activation:${activationVersion}" // JavaMail dependency (starting with Java 10), so it must be copied to <tomcat>/lib
            tomcatJars  "net.sourceforge.jtds:jtds:${jtdsVersion}" // MS SQLServer JDBC Driver
            tomcatJars  "org.postgresql:postgresql:${postgresqlDriverVersion}"
            tomcatJars   group: 'mysql', name: 'mysql-connector-java', version: mysqlDriverVersion

            remotePipelineJars "javax.servlet:servlet-api:${servletApiVersion}"
        }

apply plugin: 'org.labkey.jsdoc'
apply plugin: 'org.labkey.xsddoc'

// TODO remove this after gradle plugins 1.3.2 is released
project.apply plugin: 'com.moowork.node'
apply plugin: 'org.labkey.npmRun'

dependencies
{
   xsdDoc "xml-apis:xml-apis:${xmlApisVersion}"
   xsdDoc "xerces:xercesImpl:${xercesImplVersion}"
   xsdDoc "docflex:docflex-xml-re:${docflexXmlReVersion}"
}

apply plugin: 'org.labkey.tomcat'
apply plugin: 'org.labkey.serverDeploy'
apply plugin: 'org.labkey.database'

// This a subset of the XSDs because dependencies get pulled in.
List<File> xsdFiles = [
    project.project(":schemas").file("clientLibrary.xsd"),
    project.project(":schemas").file("apiTest.xsd"),
    project.project(":schemas").file("cohorts.xsd"),
    project.project(":schemas").file("datasets.xsd"),
    project.project(":schemas").file("domainTemplate.xsd"),
    project.project(":schemas").file("externalSchema.xsd"),
    project.project(":schemas").file("folder.xsd"),
    project.project(":schemas").file("folderType.xsd"),
    project.project(":schemas").file("module.xsd"),
    project.project(":schemas").file("pages.xsd"),
    project.project(":schemas").file("participantGroups.xsd"),
    project.project(":schemas").file("pipelineOptions.xsd"),
    project.project(":schemas").file("pipelineProtocolProps.xsd"),
    project.project(":schemas").file("qcStates.xsd"),
    project.project(":schemas").file("query.xsd"),
    project.project(":schemas").file("report.xsd"),
    project.project(":schemas").file("reportProps.xsd"),
    project.project(":schemas").file("studyDesign.xsd"),
    project.project(":schemas").file("studyViews.xsd"),
    project.project(":schemas").file("view.xsd"),
    project.project(":schemas").file("viewCategory.xsd"),
    project.project(":schemas").file("visitMap.xsd")
]
if (project.findProject(":server:modules:study") != null)
{
    xsdFiles += [project.project(":server:modules:study").file("schemas/assayProvider.xsd"),
                 project.project(":server:modules:study").file("schemas/studyPipelineTasks.xsd")]
}
if (project.findProject(":server:modules:list") != null)
    xsdFiles += project.project(":server:modules:list").file("schemas/lists.xsd");
if (project.findProject(":server:modules:pipeline")  != null)
    xsdFiles += project.project(":server:modules:pipeline").file("schemas/pipelineTasks.xsd")
if (project.findProject(":server:optionalModules:dataintegration")  != null)
    xsdFiles += project.project(":server:optionalModules:dataintegration").file("schemas/etl.xsd")
if (project.findProject(":server:optionalModules:redcap") != null)
    xsdFiles += project.project(":server:optionalModules:redcap").file("schemas/redcapExport.xsd")
if (project.findProject(":server:optionalModules:cdisc_ODM") != null)
    xsdFiles += project.project(":server:optionalModules:cdisc_ODM").file("schemas/cdiscExport.xsd")
if (project.findProject(":server:optionalModules:freezerpro") != null)
    xsdFiles += project.project(":server:optionalModules:freezerpro").file("schemas/freezerProExport.xsd")

project.xsdDoc.xsdFiles=xsdFiles

project.jsDoc.paths = [
    "api/webapp/clientapi",
    "api/webapp/clientapi/dom",
    "api/webapp/clientapi/core",
    "api/webapp/clientapi/ext3",
    "api/webapp/clientapi/ext4",
    "api/webapp/clientapi/ext4/data",
    "internal/webapp/labkey.js",
    "modules/visualization/resources/web/vis/genericChart/genericChartHelper.js",
    "modules/visualization/resources/web/vis/timeChart/timeChartHelper.js",
    "internal/webapp/vis/src"
]

task('createModule', type: CreateModule, group: "Module",
        description: "Creates a new module. Use moduleName property to specify the name of the module to be created. " +
                "Use moduleDestination to specify the full path to destination" +
                "Use createFiles to control which subdirectories are created.  Include some subset of api, test, and/or schema " +
                    "in a comma delimited list to create those subdirectories in the new module. If none are required, still " +
                    "include -PcreateFiles with no value to avoid being prompted." )

// We add this configuration here so we have a single location to link to for the npm and node executables.
// Each project that requires node will have its own downloaded version of node and npm, but for the symlinkNode
// task we need a single location, and one that works even when not building from source
// (https://www.labkey.org/Rochester/support%20tickets/issues-details.view?issueId=35207)
project.node {
    workDir = project.file("${project.rootProject.buildDir}/.node")
    npmWorkDir = project.file("${project.rootProject.buildDir}/.node")
}
project.tasks.deployApp.dependsOn(project.tasks.npmSetup)