server.port=@@serverPort@@

## To use ssl, update the properties below for your local installation

#server.ssl.enabled=true
#server.ssl.enabled-protocols=TLSv1.3,TLSv1.2,TLSv1.1
#server.ssl.key-alias=my_selfsigned
#server.ssl.key-store=/path/to/key-store-file
#server.ssl.key-store-password=pwd
#server.ssl.key-store-type=key-store-type
#server.ssl.ciphers=ciphers

context.dataSourceName[0]=jdbc/labkeyDataSource
context.driverClassName[0]=@@jdbcDriverClassName@@
context.url[0]=@@jdbcURL@@
context.username[0]=@@jdbcUser@@
context.password[0]=@@jdbcPassword@@
context.maxTotal[0]=50
context.maxIdle[0]=10
context.maxWaitMillis[0]=120000
context.accessToUnderlyingConnectionAllowed[0]=true
context.validationQuery[0]=SELECT 1

#context.logQueries[0]=true
#context.displayName[0]=Alternate Display Name

#context.dataSourceName[1]=jdbc/@@extraJdbcDataSource@@
#context.driverClassName[1]=@@extraJdbcDriverClassName@@
#context.url[1]=@@extraJdbcURL@@
#context.username[1]=@@extraJdbcUser@@
#context.password[1]=@@extraJdbcPassword@@

#useLocalBuild#context.webAppLocation=@@pathToServer@@/build/deploy/labkeyWebapp
context.encryptionKey=@@encryptionKey@@

# By default, we'll deploy to the root context path. However, some servers have historically used /labkey or even /cpas
#context.contextPath=/labkey

# Using a legacy context path provides backwards compatibility with old deployments. A typical use case would be to
# deploy to the root context (the default) and configure /labkey as the legacy path. GETs will be redirected, and
# non-GETs will be handled server-side via a servlet forward.
#context.legacyContextPath=/labkey

# Other webapps to be deployed, most commonly to deliver a set of static files. Additional
# webapps can be specified via additional indices. docBase should point at the root of the webapp's content
#webapps.contextPath[0]=/anotherWebapp
#webapps.docBase[0]=/my/webapp/path

#context.oldEncryptionKey=
#context.requiredModules=
#context.pipelineConfig=/path/to/pipeline/config/dir
#context.serverGUID=
#context.bypass2FA=false
#context.workDirLocation=/path/to/desired/workDir

mail.smtpHost=@@smtpHost@@
mail.smtpPort=@@smtpPort@@
mail.smtpUser=@@smtpUser@@
# mail.smtpFrom=@@smtpFrom@@
# mail.smtpPassword=@@smtpPassword@@
# mail.startTlsEnable=@@smtpStartTlsEnable@@
# mail.smtpSocketFactoryClass=@@smtpSocketFactoryClass@@
# mail.smtpAuth=@@smtpAuth@@

# Optional - JMS configuration for remote ActiveMQ message management for distributed pipeline jobs
# https://www.labkey.org/Documentation/wiki-page.view?name=jmsQueue
#jms.type=org.apache.activemq.ActiveMQConnectionFactory
#jms.factory=org.apache.activemq.jndi.JNDIReferenceFactory
#jms.description=JMS Connection Factory
#jms.brokerURL=vm://localhost?broker.persistent=false&broker.useJmx=false
#jms.brokerName=LocalActiveMQBroker

# Optional - LDAP configuration for LDAP group/user synchronization
# https://www.labkey.org/Documentation/wiki-page.view?name=LDAP_sync
#ldap.type=org.labkey.premium.ldap.LdapConnectionConfigFactory
#ldap.factory=org.labkey.premium.ldap.LdapConnectionConfigFactory
#ldap.host=ldap.forumsys.com
#ldap.port=389
#ldap.principal=cn=read-only-admin,dc=example,dc=com
#ldap.credentials=password
#ldap.useTls=false
#ldap.useSsl=false
#ldap.sslProtocol=SSLv3

#useLocalBuild#spring.devtools.restart.additional-paths=@@pathToServer@@/build/deploy/modules,@@pathToServer@@/build/deploy/embedded/config

# Make management endpoints accessible with LabKey at ROOT context path
server.servlet.context-path=/actuator
management.endpoints.web.base-path=/
#Enable shutdown endpoint
management.endpoint.shutdown.enabled=true
# turn off other endpoints
management.endpoints.enabled-by-default=false
# allow access via http
management.endpoints.web.exposure.include=*
# TODO use a separate port for the actuator.  This requires changes to the LabKeyServer class.
# The following error is produced:
#   Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.FatalBeanException: ServletWebServerFactory implementation org.labkey.embedded.LabKeyServer$1 cannot be instantiated.
#   To allow a separate management port to be used, a top-level class or static inner class should be used instead
#management.server.port=8081

# Don't show the Spring banner on startup
spring.main.banner-mode=off


# Turn on JSON-formatted HTTP access logging to stdout. See issue 48565
# https://tomcat.apache.org/tomcat-9.0-doc/config/valve.html#JSON_Access_Log_Valve
#jsonaccesslog.enabled=true

# Optional configuration, modeled on the non-JSON Spring Boot properties
# https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties.server.server.tomcat.accesslog.buffered
#jsonaccesslog.pattern=%h %t %m %U %s %b %D %S "%{Referer}i" "%{User-Agent}i" %{LABKEY.username}s
#jsonaccesslog.condition-if=attributeName
#jsonaccesslog.condition-unless=attributeName

# Define one or both of 'csp.report' and 'csp.enforce' to enable Content Security Policy (CSP) headers
# Do not copy-and-paste these examples for any production environment without understanding the meaning of each directive!

# example usage 1 - very strict, disallows 'external' websites, disallows unsafe-inline, but only reports violations (does not enforce)

#csp.report=\
#    default-src 'self';\
#    connect-src 'self' ${LABKEY.ALLOWED.CONNECTIONS} ;\
#    object-src 'none' ;\
#    style-src 'self' 'unsafe-inline' ;\
#    img-src 'self' data: ;\
#    font-src 'self' data: ;\
#    script-src 'unsafe-eval' 'strict-dynamic' 'nonce-${REQUEST.SCRIPT.NONCE}';\
#    base-uri 'self' ;\
#    upgrade-insecure-requests ;\
#    frame-ancestors 'self' ;\
#    report-uri https://www.labkey.org/admin-contentsecuritypolicyreport.api ;

# example usage 2 - less strict but enforces directives, (NOTE: unsafe-inline is still required for many modules)

#csp.enforce=\
#    default-src 'self' https: ;\
#    connect-src 'self' https: ${LABKEY.ALLOWED.CONNECTIONS};\
#    object-src 'none' ;\
#    style-src 'self' https: 'unsafe-inline' ;\
#    img-src 'self' data: ;\
#    font-src 'self' data: ;\
#    script-src 'unsafe-inline' 'unsafe-eval' 'strict-dynamic' 'nonce-${REQUEST.SCRIPT.NONCE}';\
#    base-uri 'self' ;\
#    upgrade-insecure-requests ;\
#    frame-ancestors 'self' ;\
#    report-uri  https://www.labkey.org/admin-contentsecuritypolicyreport.api ;

# Default CSP for TeamCity and dev deployments
#setupTask#csp.report=\
#setupTask#    default-src 'self' https: http: ;\
#setupTask#    connect-src 'self' ${LABKEY.ALLOWED.CONNECTIONS} ;\
#setupTask#    object-src 'none' ;\
#setupTask#    style-src 'self' https: 'unsafe-inline' ;\
#setupTask#    img-src 'self' https: data: ;\
#setupTask#    font-src 'self' https: data: ;\
#setupTask#    script-src 'unsafe-eval' 'strict-dynamic' 'nonce-${REQUEST.SCRIPT.NONCE}' ;\
#setupTask#    base-uri 'self' ;\
#setupTask#    frame-ancestors 'self' ;\
#setupTask#    report-uri /admin-contentsecuritypolicyreport.api ;

# Use a non-temp directory for tomcat
#setupTask#server.tomcat.basedir=@@pathToServer@@/build/deploy/embedded

# Enable tomcat access log
server.tomcat.accesslog.enabled=true
server.tomcat.accesslog.directory=logs
server.tomcat.accesslog.pattern=%h %l %u %t "%r" %s %b %D %S %I "%{Referrer}i" "%{User-Agent}i" %{LABKEY.username}s
