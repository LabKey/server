import org.labkey.gradle.util.BuildUtils
import org.labkey.gradle.util.PomFileHelper

plugins {
    id "java"
    id "maven-publish"
    id "org.springframework.boot" version "${springBootVersion}"
    id "io.spring.dependency-management" version "1.0.8.RELEASE"
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
    }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-validation:${springBootVersion}"

    runtimeOnly "org.apache.tomcat.embed:tomcat-embed-jasper:${apacheTomcatVersion}"
    runtimeOnly "javax.mail:javax.mail-api:1.6.2"
    runtimeOnly group: "com.sun.mail", name: "javax.mail", version: "1.6.0"
    runtimeOnly group: "org.apache.tomcat", name: "tomcat-dbcp", version: "${apacheTomcatVersion}"
    runtimeOnly "org.postgresql:postgresql:${postgresqlDriverVersion}"

    developmentOnly("org.springframework.boot:spring-boot-devtools")
}

BuildUtils.addLabKeyDependency(project: project, config: "implementation", depProjectPath: BuildUtils.getBootstrapProjectPath(gradle))

project.publishing {
    publications {
        embeddedJar(MavenPublication) {
            groupId = 'org.labkey.build'
            artifactId = 'embedded'
            version = project.version
            artifact project.tasks.jar.outputs.files.singleFile
            pom {
                name = "LabKey Server Embedded"
                description = "LabKey classes for producing distributions with embedded TomCat."
                developers PomFileHelper.getLabKeyTeamDevelopers()
                licenses PomFileHelper.getApacheLicense()
                organization PomFileHelper.getLabKeyOrganization()
                scm PomFileHelper.getLabKeyGitScm()
            }
        }

        if (BuildUtils.shouldPublish(project))
        {
            project.artifactoryPublish {
                publications('embeddedJar')
            }
            project.artifactoryPublish.skip = false
        }
    }
}
