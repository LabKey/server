import org.labkey.gradle.util.BuildUtils
import org.labkey.gradle.util.PomFileHelper

plugins {
    id "java"
    id "maven-publish"
    id "org.springframework.boot" version "${springBootVersion}"
    id "io.spring.dependency-management" version "1.0.8.RELEASE"
}

// 'dependency-management' plugin doesn't allow us to use 'resolutionStrategy.force' to lock versions
ext['log4j2.version'] = log4j2Version

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
    }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    embedded
}

configurations.configureEach {
//    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    exclude group: 'ch.qos.logback', module: 'logback-classic'
    exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-validation:${springBootVersion}"
//    implementation "org.springframework.boot:spring-boot-starter-log4j2:${springBootVersion}"
    // Force to use latest springVersion for CVE-2024-22262
    implementation('org.springframework:spring-web') {
        version {
            strictly "${springVersion}"
        }
    }
    // Force to the latest Tomcat version until Spring Boot 2.7.17 is released and we can adopt it
    implementation('org.apache.tomcat.embed:tomcat-embed-core') {
        version {
            strictly "${springBootTomcatVersion}"
        }
    }
    implementation('org.apache.tomcat.embed:tomcat-embed-el') {
        version {
            strictly "${springBootTomcatVersion}"
        }
    }
    implementation('org.apache.tomcat.embed:tomcat-embed-websocket') {
        version {
            strictly "${springBootTomcatVersion}"
        }
    }
    implementation('org.apache.tomcat:tomcat-annotations-api') {
        version {
            strictly "${springBootTomcatVersion}"
        }
    }
    implementation('org.apache.tomcat:tomcat-jsp-api') {
        version {
            strictly "${springBootTomcatVersion}"
        }
    }

    runtimeOnly "org.apache.tomcat.embed:tomcat-embed-jasper:${springBootTomcatVersion}"
    runtimeOnly group: "com.sun.mail", name: "jakarta.mail", version: "${javaMailVersion}"
    runtimeOnly group: "org.apache.tomcat", name: "tomcat-dbcp", version: "${springBootTomcatVersion}"
    runtimeOnly "org.postgresql:postgresql:${postgresqlDriverVersion}"
    runtimeOnly "org.apache.logging.log4j:log4j-slf4j2-impl:${log4j2Version}"
    implementation "commons-io:commons-io:${commonsIoVersion}"
    implementation "org.apache.logging.log4j:log4j-core:${log4j2Version}"

    developmentOnly("org.springframework.boot:spring-boot-devtools")
}

BuildUtils.addLabKeyDependency(project: project, config: "implementation", depProjectPath: BuildUtils.getBootstrapProjectPath(gradle))

project.publishing {
    publications {
        embeddedJar(MavenPublication) {
            groupId = 'org.labkey.build'
            artifactId = 'embedded'
            version = project.version
            artifact project.tasks.bootJar.outputs.files.singleFile
            pom {
                name = "LabKey Server Embedded"
                description = "LabKey classes for producing distributions with embedded TomCat."
                developers PomFileHelper.getLabKeyTeamDevelopers()
                licenses PomFileHelper.getApacheLicense()
                organization PomFileHelper.getLabKeyOrganization()
                scm PomFileHelper.getLabKeyGitScm()
            }
        }

        if (BuildUtils.shouldPublish(project))
        {
            project.artifactoryPublish {
                publications('embeddedJar')
            }
            project.artifactoryPublish.skip = false
        }
    }
}

project.artifacts {
    embedded project.tasks.bootJar
}

// The primary artifact from this build should be the jar produced from the bootJar task as that contains
// the SpringBoot classes.  This default jar task produces a jar file containing only the classes from src,
// which no one really needs.  If produced, this is the jar file that will be used in distributions, making
// them not really embedding anything.
jar {
 onlyIf { false }
}
