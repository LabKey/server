
buildscript {
    repositories {
        jcenter()
        maven {
            url "${artifactory_contextUrl}/libs-release"
        }
        maven {
            url "${artifactory_contextUrl}/plugins-release"
        }
        maven {
            url "${artifactory_contextUrl}/plugins-snapshot-local"
        }
    }
    dependencies {
        classpath "org.labkey.build:gradlePlugins:${gradlePluginsVersion}"
    }
    configurations.all {
        // Check for updates every build for SNAPSHOT dependencies
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
}

import org.labkey.gradle.util.BuildUtils
/*
  This file is used to determine which projects will be configured during the Gradle build of LabKey Server.

  You need to provide only the leaves of the project tree here; a Gradle project will be created for each
  node in the tree with these leaves (e.g., 'server:modules:core' will create projects for ":server"
  ":server:modules" and ":server:modules:core").
 */

// The line below includes the set of modules for a minimally functional LabKey server
BuildUtils.includeBaseModules(this.settings)
// The line below will include the server/test project as well as the server/test/modules projects
BuildUtils.includeTestModules(this.settings, rootDir)

if (hasProperty("ideaIncludeAllModules") && BuildUtils.isIntellijGradleRefresh(this))
{
    apply from: "gradle/settings/all.gradle" // Get all modules when refreshing gradle projects from IntelliJ
}
// Using the property 'moduleSet', you can apply a settings script from the gradle/settings directory with the name of the moduleSet
else if (hasProperty('moduleSet'))
{
    if (!new File("gradle/settings/${moduleSet}.gradle").exists())
    {
        def files = new File("gradle/settings").listFiles()
        if (files.length == 0)
        {
            throw new FileNotFoundException("No module set definitions found in '<labkey>/gradle/settings/'")
        }
        List<String> moduleSets = new ArrayList<>();
        for (File file : files)
        {
            moduleSets.add(file.getName().replace(".gradle", ""));
        }
        throw new FileNotFoundException(String.format("Module set '${moduleSet}' does not exist. Choose one of: %s (e.g. '-PmoduleSet=%s')", moduleSets.join(", "), moduleSets.get(0)))
    }
    apply from: "gradle/settings/${moduleSet}.gradle"
}
else
{
    // a set of directory names that correspond to modules to be excluded from configuration
    List<String> apiModules = ['labkey-api-js', 'labkey-api-r', 'labkey-api-python']
    List<String> excludedModules = ["movies", "test", "ehr_billing", "wnprc_billing"] + apiModules + BuildUtils.EHR_MODULE_NAMES
    //List<String> excludedModules = ["movies"] + apiModules
    List<String> excludedExternalModules = ["nlp", "test"]

    // Excluded external modules for EHR build
    //List<String> excludedDISCVRModules = ["CancerStudies", "galaxyintegration", "mGAP", "su2c"]
    //List<String> excludedExternalModules = ["nlp", "test"] + excludedDISCVRModules

    // The line below includes all modules in the server/modules directory (except the ones indicated as to be excluded)
    BuildUtils.includeModules(this.settings, rootDir, [BuildUtils.SERVER_MODULES_DIR], excludedModules);

    // The line below includes all modules in the server/modules, server/customModules and server/optionalModules directories
    //BuildUtils.includeModules(this.settings, rootDir, BuildUtils.SERVER_MODULE_DIRS, excludedModules);

    // The line below includes just the modules in the externalModules/RGLab directory
    //BuildUtils.includeModules(this.settings, rootDir, ["externalModules/RGLab"], excludedExternalModules);

    // The line below includes all modules in the externalModules directory (except the ones indicates as to be excluded)
    // N.B. If you include the ehr module from server/customModules, you will need to include some modules from the externalModules directory as well
    //BuildUtils.includeModules(this.settings, rootDir, BuildUtils.EXTERNAL_MODULE_DIRS, excludedExternalModules);

    // The line below includes only the external EHR modules
    //BuildUtils.includeModules(this.settings, rootDir, BuildUtils.EHR_EXTERNAL_MODULE_DIRS, excludedExternalModules)


    // The line below includes a set of individual modules (in this case all the EHR modules)
    //BuildUtils.includeModules(this.settings, [":server:customModules:EHR_ComplianceDB",
    //                                         ":server:customModules:WNPRC_EHR",
    //                                         ":server:customModules:cnprc_ehr",
    //                                         ":server:customModules:snprc_ehr",
    //                                         ":server:customModules:ehr",
    //                                         ":server:customModules:onprc_ehr"])

    // The line below is an example of how to include a single module
    //include ":server:optionalModules:workflow"
}

if (hasProperty('extraIncludes'))
{
    for (String extraInclude : "${extraIncludes}".split(","))
    {
        include extraInclude
    }
}

if (hasProperty('inheritedDistPath'))
{
    include "${inheritedDistPath}"
}
